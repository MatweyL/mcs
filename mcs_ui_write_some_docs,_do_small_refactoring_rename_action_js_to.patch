Subject: [PATCH] mcs-ui - write some docs, do small refactoring: rename action.js to request.js
---
Index: mcs-ui/src/API/api.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mcs-ui/src/API/api.js b/mcs-ui/src/API/api.js
--- a/mcs-ui/src/API/api.js	(revision c6f229be8016add91e99350ccf99d230f3d1168b)
+++ b/mcs-ui/src/API/api.js	(revision ed4a4b04fd7ec5ce4408b94d39c94f13da79df78)
@@ -1,37 +1,57 @@
 import axios from "axios";
 import {dictionaryCache} from "../store/dictionary_cache";
 
-const URL = "https://056f0a88-8d8e-4a2b-b6a5-8f196f1bee39.mock.pstmn.io";
-const MOCK_URL = "http://localhost:3000";
+const MOCK_REMOTE_URL = "https://056f0a88-8d8e-4a2b-b6a5-8f196f1bee39.mock.pstmn.io";
+const LOCAL_PY_URL = "http://localhost:8080";
+const MOCK_LOCAL_URL = "http://localhost:3000";
 
-const ENABLE_MOCK = true;
+const MOCK_LOCAL_MODE = "MOCK_LOCAL";
+const MOCK_REMOTE = "MOCK_REMOTE";
+const LOCAL_PY_MODE = "LOCAL_PY";
+
+const NOW_MODE = LOCAL_PY_MODE
 
 const endpoints = {
-   dictionary: {
-        [false]: dictionaryType =>   axios.get(`${URL}/dictionary/${dictionaryType}`,),
-        [true]: dictionaryType =>  axios.get(`${MOCK_URL}/dictionary/${dictionaryType}/dictionary.json`)
+   getDictionary: {
+        [LOCAL_PY_MODE]: dictionaryType =>   axios.get(`${LOCAL_PY_URL}/dictionary/${dictionaryType}`,),
+        [MOCK_LOCAL_MODE]: dictionaryType =>  axios.get(`${MOCK_LOCAL_URL}/dictionary/${dictionaryType}/dictionary.json`)
+    },
+    getScreen: {
+        [LOCAL_PY_MODE]: screenName => axios.get(`${LOCAL_PY_URL}/screen?screen_name=${screenName}`,),
+        [MOCK_LOCAL_MODE]: screenName => axios.get(`${MOCK_LOCAL_URL}/screen/${screenName}/screen.json`)
     },
-    screen: {
-        [false]: screenName => axios.get(`${URL}/screen/${screenName}`,),
-        [true]: screenName => axios.get(`${MOCK_URL}/screen/${screenName}/screen.json`)
+    saveScreen: {
+        [LOCAL_PY_MODE]: body => axios.post(`${LOCAL_PY_URL}/screen`, body),
+        [MOCK_LOCAL_MODE]: body => console.log(body)
+    },
+    getExistedScreen: {
+        [LOCAL_PY_MODE]: endpoint => axios.get(`${LOCAL_PY_URL}/${endpoint}`),
+        [MOCK_LOCAL_MODE]: endpoint => console.log(endpoint)
     }
 }
 
 export default class API {
 
     static async getScreen(screenName) {
-        const rs = await endpoints.screen[ENABLE_MOCK](screenName);
+        const rs = await endpoints.getScreen[NOW_MODE](screenName);
+        console.log(rs)
+        return rs;
+    }
+
+    static async getExistedScreen(endpoint) {
+        const rs = await endpoints.getExistedScreen[NOW_MODE](endpoint);
         console.log(rs)
         return rs;
     }
 
+
     static async getDictionary(dictionaryType, noCache) {
         if (noCache === true) {
-            const rs = await endpoints.dictionary[ENABLE_MOCK](dictionaryType);
+            const rs = await endpoints.getDictionary[NOW_MODE](dictionaryType);
             console.log(rs);
             return rs;
         } else if (!dictionaryCache.contains(dictionaryType)) {
-            const rs = await endpoints.dictionary[ENABLE_MOCK](dictionaryType);
+            const rs = await endpoints.getDictionary[NOW_MODE](dictionaryType);
             console.log("Кладем", dictionaryType, " в кеш");
             dictionaryCache.put(dictionaryType, rs.data);
             console.log(rs);
@@ -46,6 +66,8 @@
 
     static async saveScreen(screen) {
         console.log(screen);
+        const rs = await endpoints.saveScreen[NOW_MODE](screen);
+        console.log(rs);
     }
 }
 
Index: mcs-ui/src/store/request.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mcs-ui/src/store/request.js b/mcs-ui/src/store/request.js
--- a/mcs-ui/src/store/request.js	(revision c6f229be8016add91e99350ccf99d230f3d1168b)
+++ b/mcs-ui/src/store/request.js	(revision ed4a4b04fd7ec5ce4408b94d39c94f13da79df78)
@@ -45,7 +45,10 @@
         }
 
         case Requests.OPEN: {
-            console.log(`/screen?screenName=${attribute.openOnEdit}&id=${attribute[attribute.fieldName]}`);
+            const endpoint = `screen?screen_name=${attribute.openOnEdit}&id=${attribute[attribute.fieldName]}`;
+            console.log(endpoint);
+            API.getExistedScreen(endpoint)
+                .then()
             // открытие страницы с существующим эл-том
             return;
         }
Index: service/api.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/service/api.py b/service/api.py
--- a/service/api.py	(revision c6f229be8016add91e99350ccf99d230f3d1168b)
+++ b/service/api.py	(revision ed4a4b04fd7ec5ce4408b94d39c94f13da79df78)
@@ -1,17 +1,31 @@
 import uvicorn
 from fastapi import FastAPI
+from starlette.middleware.cors import CORSMiddleware
 
 from service.common.logs import logger
 from service.common.utils import get_root_path
 from service.domain.phone import Phone
 from service.schemas.screen import ScreenUpdated
+from service.services.channel_list.processor import ChannelListScreenProcessor, DumbScreenProcessor, \
+    ChannelEditorScreenProcessor
 from service.services.channels.manager import ChannelsManager
 from service.services.phone_objects_saver import PhoneObjectsSaver
+from service.services.registry import ScreenProcessorRegistry
 from service.services.screens.filler import ScreenFiller
 from service.services.screens.manager import ScreensManager
-from service.services.screens.storage import FileSystemScreensStorage
+from service.services.screens.manager_v2 import ScreensManagerV2
+from service.services.screens.phone_storage import InMemoryPhoneStorage
+from service.services.screens.screens_storage import FileSystemScreensStorage
 
 app = FastAPI()
+app.add_middleware(
+    CORSMiddleware,
+    allow_origins=["*"],
+    allow_credentials=True,
+    allow_methods=["*"],
+    allow_headers=["*"],
+)
+
 phone = Phone([])
 screen_filler = ScreenFiller()
 
@@ -23,6 +37,18 @@
 screen_manager_map = {"CHANNEL_EDITOR": channels_manager}
 screens_data_saver = PhoneObjectsSaver(screen_manager_map)
 
+processors = [
+    ChannelListScreenProcessor("CHANNEL_LIST"),
+    ChannelEditorScreenProcessor("CHANNEL_EDITOR"),
+    DumbScreenProcessor("PPRCH_FREQUENCY_PLAN"),
+    DumbScreenProcessor("SERVICE_MENU"),
+    DumbScreenProcessor("MAIN_SCREEN"),
+]
+
+phone_storage = InMemoryPhoneStorage()
+screen_processor_registry = ScreenProcessorRegistry(processors)
+screens_manager_v2 = ScreensManagerV2(screen_processor_registry, phone_storage, screens_storage)
+
 
 @app.get('/dictionary/{dictionary_name}')
 async def get_dictionary(dictionary_name: str):  # TODO: обсудить реализацию
@@ -32,6 +58,25 @@
 @app.get('/screen')
 async def get_screen(screen_name: str, element_uid: str = None):
     try:
+        return screens_manager_v2.get(screen_name, {"id": element_uid})
+    except BaseException as e:
+        logger.exception(e)
+
+
+@app.post('/screen')
+async def save_screen(screen_model: ScreenUpdated):
+    try:
+        screens_manager_v2.save(screen_model)
+    except BaseException as e:
+        logger.exception(e)
+        raise e
+    else:
+        return 201
+
+
+@app.get('/screen-v1')
+async def get_screen(screen_name: str, element_uid: str = None):
+    try:
         is_new_screen = not element_uid
         if is_new_screen:
             logger.info('new screen will created')
@@ -42,7 +87,7 @@
         logger.exception(e)
 
 
-@app.post('/screen')
+@app.post('/screen-v1')
 async def save_screen(screen_updated: ScreenUpdated):
     try:
         screens_data_saver.save(screen_updated)
Index: service/domain/channels.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/service/domain/channels.py b/service/domain/channels.py
--- a/service/domain/channels.py	(revision c6f229be8016add91e99350ccf99d230f3d1168b)
+++ b/service/domain/channels.py	(revision ed4a4b04fd7ec5ce4408b94d39c94f13da79df78)
@@ -32,8 +32,8 @@
 class ChannelCHM25(Channel):
     channel_mode: ChannelMode = Field(default=ChannelMode.CHM25,
                                       validation_alias=AliasChoices('channel_mode',))
-    prd_forbidden: bool = Field(default=False,
-                                validation_alias=AliasChoices('prd_forbidden', 'prdForbidden',))
+    forbidden_send: bool = Field(default=False,
+                                 validation_alias=AliasChoices('forbidden_send', 'forbiddenSend',))
     double_frequency: bool = Field(default=False,
                                    validation_alias=AliasChoices('double_frequency', 'doubleFrequency',))
     frequency: float = Field(default=0, validation_alias=AliasChoices('frequency',))
Index: service/schemas/exceptions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/service/schemas/exceptions.py b/service/schemas/exceptions.py
--- a/service/schemas/exceptions.py	(revision c6f229be8016add91e99350ccf99d230f3d1168b)
+++ b/service/schemas/exceptions.py	(revision ed4a4b04fd7ec5ce4408b94d39c94f13da79df78)
@@ -13,3 +13,9 @@
 class WrongAttributeValueException(Exception):
     def __init__(self, wrong_value=None, correct_values=None):
         super(WrongAttributeValueException, self).__init__(f"{wrong_value} not in {correct_values}")
+
+
+class NoProcessorWithScreenNameException(Exception):
+    def __init__(self, screen_name: str = None):
+        super(NoProcessorWithScreenNameException, self).__init__(f"No processor with {screen_name}")
+
Index: service/services/base.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/service/services/base.py b/service/services/base.py
--- a/service/services/base.py	(revision c6f229be8016add91e99350ccf99d230f3d1168b)
+++ b/service/services/base.py	(revision ed4a4b04fd7ec5ce4408b94d39c94f13da79df78)
@@ -1,6 +1,9 @@
 from abc import abstractmethod
 from typing import Dict, Any
 
+from service.domain.phone import Phone
+from service.schemas.screen import ScreenUpdated
+
 
 class PhoneObjectManagerInterface:
 
@@ -18,3 +21,50 @@
     @abstractmethod
     def get(self, screen_name: str) -> dict:
         pass
+
+
+class PhoneStorageInterface:
+
+    @abstractmethod
+    def load_phone(self, uid: str = None) -> Phone:
+        pass
+
+    @abstractmethod
+    def save_phone(self, phone: Phone):
+        pass
+
+
+class ScreenProcessorInterface:
+    """
+    Обработчик экрана
+    """
+
+    @abstractmethod
+    def save(self, phone: Phone, screen: ScreenUpdated):
+        """
+
+        :param phone: доменный объект телефона
+        :param screen: экран с данными
+
+        :return:
+        """
+        pass
+
+    @abstractmethod
+    def get(self, phone: Phone, screen: Dict[str, Any], context: dict):
+        """
+
+        :param phone: доменный объект телефона
+        :param screen: шаблон экрана
+        :param context: контекст для заполнения
+
+        :return: заполненный экран
+        """
+        pass
+
+    @abstractmethod
+    def get_screen_name(self):
+        """
+        :return: название обрабатываемого экрана
+        """
+        pass
Index: service/services/channel_list/processor.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/service/services/channel_list/processor.py b/service/services/channel_list/processor.py
new file mode 100644
--- /dev/null	(revision ed4a4b04fd7ec5ce4408b94d39c94f13da79df78)
+++ b/service/services/channel_list/processor.py	(revision ed4a4b04fd7ec5ce4408b94d39c94f13da79df78)
@@ -0,0 +1,109 @@
+from typing import Dict, Any
+
+from service.common.logs import logger
+from service.common.utils import generate_uid
+from service.domain.base import get_attribute_from_dict
+from service.domain.channels import Channel, channel_mode_schema_map
+from service.domain.phone import Phone
+from service.schemas.screen import ScreenUpdated
+from service.services.base import ScreenProcessorInterface
+
+
+class ChannelListScreenProcessor(ScreenProcessorInterface):
+
+    def __init__(self, screen_name) -> None:
+        self.screen_name = screen_name
+
+    def save(self, phone: Phone, screen: ScreenUpdated):
+        """
+        Без реализации, т.к. данный экран будет read-only
+        """
+        pass
+
+    def get(self, phone: Phone, screen: Dict[str, Any], context: dict):
+        logger.info("Get in ChannelListScreenProcessor")
+        for channel in phone.get_channels():
+            attribute = {
+                "type": "CARD_ITEM",
+                "label": channel.name,
+                "used": True,
+                "id": channel.channel_uid
+            }
+            screen['attributes'][channel.name] = attribute
+        return screen
+
+    def get_screen_name(self):
+        return self.screen_name
+
+
+class ChannelEditorScreenProcessor(ScreenProcessorInterface):
+
+    def __init__(self, screen_name) -> None:
+        self.screen_name = screen_name
+
+    def save(self, phone: Phone, screen: ScreenUpdated):
+        logger.info("Save in ChannelEditorScreenProcessor")
+        attributes = screen.attributes
+        logger.debug(screen.attributes)
+        channel_uid = attributes.get('CHANNEL_ID', None)
+        logger.debug(f'CHANNEL_ID - {channel_uid}')
+        if channel_uid is not None:
+            logger.debug("Get existed channel")
+            channel = phone.get_channel(channel_uid)
+        else:
+            logger.debug("Create new channel")
+            channel_mode = get_attribute_from_dict('CHANNEL_MODE', attributes)
+            channel_uid = generate_uid()
+            channel_schema = channel_mode_schema_map.get(channel_mode)
+
+            channel = channel_schema(channel_uid=channel_uid, channel_mode=channel_mode)
+            channel.forbidden_send = attributes['FORBIDDEN_SEND']
+            channel.double_frequency = attributes['DOUBLE_FREQUENCY']
+            channel.frequency = attributes['FREQUENCY']
+            channel.ctcss = attributes['CTCSS']
+            channel.name = attributes['NAME']
+
+            phone.add_channel(channel)
+            logger.info(phone.get_channels())
+
+
+    def get(self, phone: Phone, screen: Dict[str, Any], context: dict):
+        try:
+            channel_uid = context['uid']
+        except KeyError:
+            return screen
+        channel = phone.get_channel(channel_uid)
+        # if channel.channel_mode == 'CHM25':
+        screen['attributes']['MODE']['value'] = channel.channel_mode
+        screen['attributes']['FORBIDDEN_SEND']['value'] = channel.forbidden_send
+        screen['attributes']['DOUBLE_FREQUENCY']['value'] = channel.double_frequency
+        screen['attributes']['FREQUENCY']['value'] = channel.frequency
+        screen['attributes']['CTCSS']['value'] = channel.ctcss
+        screen['attributes']['NAME']['value'] = channel.name
+
+        return screen
+
+    def get_screen_name(self):
+        return self.screen_name
+
+
+class DumbScreenProcessor(ScreenProcessorInterface):
+    def __init__(self, screen_name) -> None:
+        self.screen_name = screen_name
+
+    def save(self, phone: Phone, screen: ScreenUpdated):
+        """
+        Без реализации, т.к. данный экран будет read-only
+        """
+        pass
+
+    def get(self, phone: Phone, screen: Dict[str, Any], context: dict):
+        """
+        Возвращает по-умолчанию заполненный шаблон
+        """
+        logger.info(f'DumbScreenProcessor возвращает шаблон: {screen["name"]}')
+
+        return screen
+
+    def get_screen_name(self):
+        return self.screen_name
Index: service/services/screens/manager_v2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/service/services/screens/manager_v2.py b/service/services/screens/manager_v2.py
new file mode 100644
--- /dev/null	(revision ed4a4b04fd7ec5ce4408b94d39c94f13da79df78)
+++ b/service/services/screens/manager_v2.py	(revision ed4a4b04fd7ec5ce4408b94d39c94f13da79df78)
@@ -0,0 +1,30 @@
+from typing import Dict, Any
+
+from service.schemas.screen import ScreenUpdated
+from service.services.base import ScreensStorageInterface, PhoneStorageInterface
+from service.services.registry import ScreenProcessorRegistry
+
+
+class ScreensManagerV2:
+
+    def __init__(self,
+                 registry: ScreenProcessorRegistry,
+                 phone_storage: PhoneStorageInterface,
+                 screen_storage: ScreensStorageInterface):
+        self.registry = registry
+        self.phone_storage = phone_storage
+        self.screen_storage = screen_storage
+
+    def get(self, screen_name: str, context: Dict[str, Any]):
+        phone = self.phone_storage.load_phone(None)
+        screen_template = self.screen_storage.get(screen_name)
+        processor = self.registry.get(screen_name)
+
+        return processor.get(phone, screen_template, context)
+
+    def save(self, screen_model: ScreenUpdated):
+        phone = self.phone_storage.load_phone(None)
+        processor = self.registry.get(screen_model.name)
+
+        processor.save(phone, screen_model)
+        self.phone_storage.save_phone(phone)
Index: service/services/screens/phone_storage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/service/services/screens/phone_storage.py b/service/services/screens/phone_storage.py
new file mode 100644
--- /dev/null	(revision ed4a4b04fd7ec5ce4408b94d39c94f13da79df78)
+++ b/service/services/screens/phone_storage.py	(revision ed4a4b04fd7ec5ce4408b94d39c94f13da79df78)
@@ -0,0 +1,14 @@
+from service.domain.phone import Phone
+from service.services.base import PhoneStorageInterface
+
+
+class InMemoryPhoneStorage(PhoneStorageInterface):
+
+    def __init__(self) -> None:
+        self.phone = Phone([])
+
+    def load_phone(self, uid: str = None) -> Phone:
+        return self.phone
+
+    def save_phone(self, phone: Phone):
+        self.phone = phone
diff --git a/service/services/channel_list/__init__.py b/service/services/channel_list/__init__.py
new file mode 100644
diff --git a/service/services/screens/storage.py b/service/services/screens/screens_storage.py
rename from service/services/screens/storage.py
rename to service/services/screens/screens_storage.py
